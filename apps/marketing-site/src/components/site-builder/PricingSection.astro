---
interface PricingPlan {
  name: string;
  price: number;
  interval?: string;
  features: string[];
  buttonText?: string;
  featured?: boolean;
  description?: string;
  badge?: string;
  badgeStyle?: string;
}

export interface Props {
  title: string;
  subtitle?: string;
  plans: PricingPlan[] | any[]; // Support both simple arrays and Strapi components
}

const { title, subtitle, plans = [] } = Astro.props;

// Transform plans to handle both formats (simple arrays and Strapi components)
const transformedPlans = plans.map((plan) => {
  // If it's a Strapi component, extract the actual data
  if (plan.__component === "elements.pricing-plan") {
    return {
      name: plan.name,
      price: plan.price,
      interval: plan.interval,
      features: plan.features,
      buttonText: plan.buttonText,
      featured: plan.featured,
      description: plan.description,
      badge: plan.badge,
      badgeStyle: plan.badgeStyle || "primary",
    };
  }
  // Otherwise, use it as-is (simple object format)
  return {
    ...plan,
    badgeStyle: plan.badgeStyle || "primary",
  };
});
---

<section class="py-20 bg-base-100">
  <div class="container mx-auto px-4">
    <div class="text-center mb-12">
      <h2 class="text-4xl font-bold mb-4">{title}</h2>
      {subtitle && <p class="text-xl text-base-content/70">{subtitle}</p>}
    </div>
    <div class="grid grid-cols-1 md:grid-cols-3 gap-8 max-w-6xl mx-auto">
      {
        transformedPlans.map((plan) => (
          <div
            class={`card bg-base-200 shadow-lg ${plan.featured ? "ring-2 ring-primary transform scale-105" : ""} transition-all`}
          >
            <div class="card-body">
              <div class="flex items-center gap-2 mb-3">
                {plan.featured && (
                  <div class="badge badge-primary">Most Popular</div>
                )}
                {plan.badge && (
                  <div class={`badge badge-${plan.badgeStyle}`}>
                    {plan.badge}
                  </div>
                )}
              </div>
              <h3 class="card-title text-2xl mb-2">{plan.name}</h3>
              {plan.description && (
                <p class="text-sm text-base-content/70 mb-4">
                  {plan.description}
                </p>
              )}
              <div class="text-4xl font-bold mb-4">
                ${plan.price || 0}
                <span class="text-lg font-normal text-base-content/70">
                  /{plan.interval || "one-time"}
                </span>
              </div>
              <ul class="space-y-2 mb-6">
                {plan.features?.map((feature) => (
                  <li class="flex items-center gap-2">
                    <span class="text-success text-lg">âœ“</span>
                    <span class="text-sm">{feature}</span>
                  </li>
                ))}
              </ul>
              <button
                class={`btn ${plan.featured ? "btn-primary" : "btn-outline btn-primary"} btn-block`}
              >
                {plan.buttonText || "Get Started"}
              </button>
            </div>
          </div>
        ))
      }
    </div>
  </div>
</section>
