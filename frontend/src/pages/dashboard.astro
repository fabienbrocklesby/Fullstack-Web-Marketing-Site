---
import Layout from "../layouts/Layout.astro";
---

<Layout title="Marketing Dashboard">
  <main class="min-h-screen bg-base-200">
    <div class="navbar bg-base-100 shadow-md">
      <div class="flex-1">
        <a class="btn btn-ghost text-xl">Marketing Dashboard</a>
      </div>
      <div class="flex-none">
        <div class="dropdown dropdown-end">
          <label tabindex="0" class="btn btn-ghost">
            <span id="user-email">Loading...</span>
          </label>
          <ul
            tabindex="0"
            class="menu menu-sm dropdown-content mt-3 z-[1] p-2 shadow bg-base-100 rounded-box w-52"
          >
            <li><a id="logout-btn">Logout</a></li>
          </ul>
        </div>
      </div>
    </div>

    <div class="container mx-auto p-6">
      <!-- Date Range Selector -->
      <div class="card bg-base-100 shadow-lg mb-6">
        <div class="card-body">
          <h2 class="card-title">Date Range</h2>
          <div class="grid grid-cols-1 md:grid-cols-3 gap-4 items-end">
            <div class="form-control">
              <label class="label">
                <span class="label-text">From Date</span>
              </label>
              <input type="date" id="date-from" class="input input-bordered" />
            </div>
            <div class="form-control">
              <label class="label">
                <span class="label-text">To Date</span>
              </label>
              <input type="date" id="date-to" class="input input-bordered" />
            </div>
            <div class="form-control">
              <button class="btn btn-primary" id="apply-date-filter">
                Apply Filter
              </button>
              <button
                class="btn btn-outline btn-sm mt-2"
                id="reset-date-filter"
              >
                Show All Time
              </button>
            </div>
          </div>
        </div>
      </div>

      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
        <!-- Total Sales -->
        <div class="stat bg-base-100 shadow-lg rounded-lg">
          <div class="stat-title">Total Sales</div>
          <div class="stat-value" id="total-sales">$0</div>
          <div class="stat-desc" id="total-sales-desc">All time</div>
        </div>

        <!-- Total Commission -->
        <div class="stat bg-base-100 shadow-lg rounded-lg">
          <div class="stat-title">Your Commission</div>
          <div class="stat-value text-success" id="total-commission">$0</div>
          <div class="stat-desc" id="total-commission-desc">All time</div>
        </div>

        <!-- Conversion Rate -->
        <div class="stat bg-base-100 shadow-lg rounded-lg">
          <div class="stat-title">Conversion Rate</div>
          <div class="stat-value" id="conversion-rate">0%</div>
          <div class="stat-desc" id="conversion-rate-desc">All time</div>
        </div>
      </div>

      <!-- Recent Sales -->
      <div class="card bg-base-100 shadow-lg">
        <div class="card-body">
          <h2 class="card-title">Sales</h2>
          <div class="overflow-x-auto">
            <table class="table">
              <thead>
                <tr>
                  <th>Date</th>
                  <th>Customer</th>
                  <th>Amount</th>
                  <th>Commission</th>
                  <th>Status</th>
                </tr>
              </thead>
              <tbody id="sales-table">
                <tr>
                  <td colspan="5" class="text-center">Loading...</td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>
      </div>

      <!-- Affiliate Link Generator -->
      <div class="card bg-base-100 shadow-lg mt-6">
        <div class="card-body">
          <h2 class="card-title">Your Affiliate Link</h2>
          <div class="form-control">
            <label class="label">
              <span class="label-text">Your unique affiliate code:</span>
            </label>
            <div class="input-group">
              <input
                type="text"
                id="affiliate-code"
                class="input input-bordered flex-1"
                readonly
              />
              <button class="btn btn-primary" id="copy-code">Copy</button>
            </div>
          </div>
          <div class="form-control mt-4">
            <label class="label">
              <span class="label-text">Your affiliate link:</span>
            </label>
            <div class="input-group">
              <input
                type="text"
                id="affiliate-link"
                class="input input-bordered flex-1"
                readonly
              />
              <button class="btn btn-primary" id="copy-link">Copy</button>
            </div>
          </div>
        </div>
      </div>

      <!-- Conversion Funnel Analytics (if available) -->
      <div
        class="card bg-base-100 shadow-lg mt-6"
        id="funnel-analytics"
        style="display: none;"
      >
        <div class="card-body">
          <h2 class="card-title">Conversion Funnel</h2>
          <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
            <div class="stat">
              <div class="stat-title">Visits</div>
              <div class="stat-value text-primary" id="funnel-visits">0</div>
            </div>
            <div class="stat">
              <div class="stat-title">Button Clicks</div>
              <div class="stat-value text-secondary" id="funnel-clicks">0</div>
            </div>
            <div class="stat">
              <div class="stat-title">Registrations</div>
              <div class="stat-value text-accent" id="funnel-registrations">
                0
              </div>
            </div>
            <div class="stat">
              <div class="stat-title">Purchases</div>
              <div class="stat-value text-success" id="funnel-purchases">0</div>
            </div>
          </div>
          <div class="mt-4">
            <div class="text-sm opacity-70">
              <span
                >Visit → Click: <span id="visit-to-click-rate">0%</span></span
              > |
              <span
                >Click → Register: <span id="click-to-register-rate">0%</span
                ></span
              > |
              <span
                >Register → Purchase: <span id="register-to-purchase-rate"
                  >0%</span
                ></span
              >
            </div>
          </div>
        </div>
      </div>

      <!-- Detailed Visitor Journeys -->
      <div
        class="card bg-base-100 shadow-lg mt-6"
        id="visitor-journeys"
        style="display: none;"
      >
        <div class="card-body">
          <div class="flex justify-between items-center mb-4">
            <h2 class="card-title">Visitor Journeys & Clickstreams</h2>
            <div class="flex gap-2">
              <button class="btn btn-sm btn-outline" id="refresh-journeys">
                <svg
                  class="w-4 h-4"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"
                  ></path>
                </svg>
                Refresh
              </button>
              <select class="select select-bordered select-sm" id="page-filter">
                <option value="">All Pages</option>
                <option value="/pricing">Pricing</option>
                <option value="/customer/register">Registration</option>
                <option value="/customer/login">Login</option>
              </select>
            </div>
          </div>

          <!-- Journey Summary Stats -->
          <div class="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
            <div class="stat bg-base-200 rounded-lg">
              <div class="stat-title">Total Visitors</div>
              <div class="stat-value text-sm" id="total-visitors">0</div>
            </div>
            <div class="stat bg-base-200 rounded-lg">
              <div class="stat-title">Avg Session Time</div>
              <div class="stat-value text-sm" id="avg-session-time">0 min</div>
            </div>
            <div class="stat bg-base-200 rounded-lg">
              <div class="stat-title">Total Page Views</div>
              <div class="stat-value text-sm" id="total-page-views">0</div>
            </div>
            <div class="stat bg-base-200 rounded-lg">
              <div class="stat-title">Top Page</div>
              <div class="stat-value text-sm" id="top-page">-</div>
            </div>
          </div>

          <!-- Individual Journeys -->
          <div class="space-y-4" id="journey-list">
            <div class="text-center py-8 opacity-50">
              <div class="loading loading-spinner loading-md"></div>
              <p class="mt-2">Loading visitor journeys...</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </main>
</Layout>

<script>
  // Check if user is logged in
  const jwt = localStorage.getItem("jwt");
  const user = JSON.parse(localStorage.getItem("user") || "{}");

  if (!jwt || !user.id) {
    window.location.href = "/login";
  } else {
    // Display user email
    const userEmailElement = document.getElementById("user-email");
    if (userEmailElement) {
      userEmailElement.textContent = user.email || "User";
    }

    // Logout functionality
    document.getElementById("logout-btn")?.addEventListener("click", () => {
      localStorage.removeItem("jwt");
      localStorage.removeItem("user");
      window.location.href = "/login";
    });

    // Copy functionality
    document.getElementById("copy-code")?.addEventListener("click", () => {
      const codeInput = document.getElementById(
        "affiliate-code",
      ) as HTMLInputElement;
      if (codeInput) {
        codeInput.select();
        document.execCommand("copy");
        alert("Affiliate code copied!");
      }
    });

    document.getElementById("copy-link")?.addEventListener("click", () => {
      const linkInput = document.getElementById(
        "affiliate-link",
      ) as HTMLInputElement;
      if (linkInput) {
        linkInput.select();
        document.execCommand("copy");
        alert("Affiliate link copied!");
      }
    });

    // Load dashboard data
    let currentDateRange: { from: string | null; to: string | null } = {
      from: null,
      to: null,
    };

    async function loadDashboardData(
      dateFrom: string | null = null,
      dateTo: string | null = null,
    ) {
      try {
        const cmsUrl =
          document.documentElement.getAttribute("data-cms-url") ||
          "http://localhost:1337";

        // Double-check authentication before making API calls
        const jwt = localStorage.getItem("jwt");
        if (!jwt) {
          window.location.href = "/login";
          return;
        }

        // Get user's affiliate data
        const affiliateResponse = await fetch(`${cmsUrl}/api/my-affiliates`, {
          headers: {
            Authorization: `Bearer ${jwt}`,
          },
        });

        if (!affiliateResponse.ok) {
          if (
            affiliateResponse.status === 401 ||
            affiliateResponse.status === 403
          ) {
            // Authentication failed, redirect to login
            localStorage.removeItem("jwt");
            localStorage.removeItem("user");
            window.location.href = "/login";
            return;
          }
          throw new Error("Failed to fetch affiliate data");
        }

        const affiliateData = await affiliateResponse.json();
        let affiliate = affiliateData.data?.[0];

        // Create affiliate if doesn't exist
        if (!affiliate) {
          console.log("Creating new affiliate record...");
          const createResponse = await fetch(`${cmsUrl}/api/my-affiliates`, {
            method: "POST",
            headers: {
              Authorization: `Bearer ${jwt}`,
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              data: {
                email: user.email,
                name: user.username || user.email,
                isActive: true,
              },
            }),
          });

          if (!createResponse.ok) {
            const errorData = await createResponse.json();
            console.error("Failed to create affiliate:", errorData);
            throw new Error("Failed to create affiliate record");
          }

          const createData = await createResponse.json();
          affiliate = createData.data;
          console.log("Affiliate created:", affiliate);
        }

        // Update affiliate code and link
        const codeInput = document.getElementById(
          "affiliate-code",
        ) as HTMLInputElement;
        const linkInput = document.getElementById(
          "affiliate-link",
        ) as HTMLInputElement;

        if (codeInput && linkInput && affiliate) {
          const affiliateCode =
            affiliate.attributes?.code || affiliate.code || `user_${user.id}`;
          codeInput.value = affiliateCode;
          linkInput.value = `${window.location.origin}/pricing?ref=${affiliateCode}`;
        }

        // Build purchase API URL with date filtering
        let purchaseUrl = `${cmsUrl}/api/my-purchases?populate=*`;

        // Add date filters if specified
        if (dateFrom) {
          purchaseUrl += `&filters[createdAt][$gte]=${dateFrom}T00:00:00.000Z`;
        }
        if (dateTo) {
          purchaseUrl += `&filters[createdAt][$lte]=${dateTo}T23:59:59.999Z`;
        }

        // Get purchases for this affiliate
        const purchasesResponse = await fetch(purchaseUrl, {
          headers: {
            Authorization: `Bearer ${jwt}`,
          },
        });

        let purchases = [];
        if (purchasesResponse.ok) {
          const purchasesData = await purchasesResponse.json();
          purchases = purchasesData.data || [];
        }

        // Get real affiliate stats including conversion rate
        let affiliateStatsUrl = `${cmsUrl}/api/affiliate-stats`;
        if (dateFrom) {
          affiliateStatsUrl += `?dateFrom=${dateFrom}`;
        }
        if (dateTo) {
          affiliateStatsUrl += `${dateFrom ? "&" : "?"}dateTo=${dateTo}`;
        }

        const statsResponse = await fetch(affiliateStatsUrl, {
          headers: {
            Authorization: `Bearer ${jwt}`,
          },
        });

        let affiliateStats: any = {
          visits: 0,
          purchases: 0,
          conversionRate: 0,
          totalEarnings: 0,
          funnelMetrics: null,
        };

        if (statsResponse.ok) {
          affiliateStats = await statsResponse.json();
          console.log("📊 Affiliate stats loaded:", affiliateStats);
        } else {
          console.warn("Failed to load affiliate stats:", statsResponse.status);
        }

        // Calculate stats for the filtered purchases
        const totalSales = purchases.reduce((sum: number, purchase: any) => {
          return sum + (purchase.amount || 0);
        }, 0);

        const totalCommission = purchases.reduce(
          (sum: number, purchase: any) => {
            return sum + (purchase.commissionAmount || 0);
          },
          0,
        );

        // Use real conversion rate from affiliate stats - cap at 100%
        const conversionRate = Math.min(
          affiliateStats.conversionRate || 0,
          100,
        );

        // Update funnel analytics if available
        if (affiliateStats.funnelMetrics) {
          const funnel = affiliateStats.funnelMetrics;
          const funnelSection = document.getElementById("funnel-analytics");
          if (funnelSection) {
            funnelSection.style.display = "block";

            document.getElementById("funnel-visits")!.textContent =
              funnel.visits || 0;
            document.getElementById("funnel-clicks")!.textContent =
              funnel.buttonClicks || 0;
            document.getElementById("funnel-registrations")!.textContent =
              funnel.registrations || 0;
            document.getElementById("funnel-purchases")!.textContent =
              funnel.purchases || 0;

            // Calculate funnel conversion rates - cap at 100%
            const visitToClick =
              funnel.visits > 0
                ? Math.min(
                    (funnel.buttonClicks / funnel.visits) * 100,
                    100,
                  ).toFixed(1)
                : "0";
            const clickToRegister =
              funnel.buttonClicks > 0
                ? Math.min(
                    (funnel.registrations / funnel.buttonClicks) * 100,
                    100,
                  ).toFixed(1)
                : "0";
            const registerToPurchase =
              funnel.registrations > 0
                ? Math.min(
                    (funnel.purchases / funnel.registrations) * 100,
                    100,
                  ).toFixed(1)
                : "0";

            document.getElementById("visit-to-click-rate")!.textContent =
              visitToClick + "%";
            document.getElementById("click-to-register-rate")!.textContent =
              clickToRegister + "%";
            document.getElementById("register-to-purchase-rate")!.textContent =
              registerToPurchase + "%";
          }
        }

        // Update stats descriptions based on date range
        let dateRangeDesc = "All time";
        if (dateFrom && dateTo) {
          const fromDateFormatted = new Date(dateFrom).toLocaleDateString();
          const toDateFormatted = new Date(dateTo).toLocaleDateString();
          dateRangeDesc = `${fromDateFormatted} to ${toDateFormatted}`;
        } else if (dateFrom) {
          const fromDateFormatted = new Date(dateFrom).toLocaleDateString();
          dateRangeDesc = `From ${fromDateFormatted}`;
        } else if (dateTo) {
          const toDateFormatted = new Date(dateTo).toLocaleDateString();
          dateRangeDesc = `Until ${toDateFormatted}`;
        }

        // Update stats
        const totalSalesElement = document.getElementById("total-sales");
        const totalCommissionElement =
          document.getElementById("total-commission");
        const conversionRateElement =
          document.getElementById("conversion-rate");
        const totalSalesDescElement =
          document.getElementById("total-sales-desc");
        const totalCommissionDescElement = document.getElementById(
          "total-commission-desc",
        );
        const conversionRateDescElement = document.getElementById(
          "conversion-rate-desc",
        );

        if (totalSalesElement)
          totalSalesElement.textContent = `$${totalSales.toFixed(2)}`;
        if (totalCommissionElement)
          totalCommissionElement.textContent = `$${totalCommission.toFixed(2)}`;
        if (conversionRateElement)
          conversionRateElement.textContent = `${conversionRate}%`;

        if (totalSalesDescElement)
          totalSalesDescElement.textContent = dateRangeDesc;
        if (totalCommissionDescElement)
          totalCommissionDescElement.textContent = dateRangeDesc;
        if (conversionRateDescElement)
          conversionRateDescElement.textContent = dateRangeDesc;

        // Update sales table
        const salesTableElement = document.getElementById("sales-table");
        if (salesTableElement) {
          if (purchases.length === 0) {
            salesTableElement.innerHTML =
              '<tr><td colspan="5" class="text-center">No sales found for the selected period. Share your affiliate link to start earning!</td></tr>';
          } else {
            // Sort purchases by date (newest first) and show all
            const sortedPurchases = purchases.sort((a: any, b: any) => {
              const dateA = new Date(a.createdAt);
              const dateB = new Date(b.createdAt);
              return dateB.getTime() - dateA.getTime();
            });

            salesTableElement.innerHTML = sortedPurchases
              .map((purchase: any) => {
                const date = new Date(purchase.createdAt).toLocaleDateString();
                const amount = purchase.amount || 0;
                const commission = purchase.commissionAmount || 0;
                const status = purchase.status || "completed";
                const customerEmail = purchase.customerEmail || "Anonymous";

                return `
              <tr>
                <td>${date}</td>
                <td>${customerEmail}</td>
                <td>$${amount.toFixed(2)}</td>
                <td class="text-success">$${commission.toFixed(2)}</td>
                <td><span class="badge badge-${status === "completed" ? "success" : "warning"}">${status}</span></td>
              </tr>
            `;
              })
              .join("");
          }
        }

        // Update funnel analytics
        const funnelAnalyticsElement =
          document.getElementById("funnel-analytics");
        if (funnelAnalyticsElement) {
          if (affiliateStats.visits > 0) {
            funnelAnalyticsElement.style.display = "block";

            // Update funnel metrics
            document.getElementById("funnel-visits")!.textContent =
              affiliateStats.visits.toString();
            document.getElementById("funnel-clicks")!.textContent =
              affiliateStats.clicks?.toString() || "0";
            document.getElementById("funnel-registrations")!.textContent =
              affiliateStats.registrations?.toString() || "0";
            document.getElementById("funnel-purchases")!.textContent =
              affiliateStats.purchases.toString();

            // Calculate and display funnel conversion rates - cap at 100%
            const visitToClickRate =
              affiliateStats.visits > 0
                ? Math.min(
                    ((affiliateStats.clicks || 0) / affiliateStats.visits) *
                      100,
                    100,
                  ).toFixed(2)
                : "0.00";
            const clickToRegisterRate =
              (affiliateStats.clicks || 0) > 0
                ? Math.min(
                    ((affiliateStats.registrations || 0) /
                      (affiliateStats.clicks || 0)) *
                      100,
                    100,
                  ).toFixed(2)
                : "0.00";
            const registerToPurchaseRate =
              (affiliateStats.registrations || 0) > 0
                ? Math.min(
                    ((affiliateStats.purchases || 0) /
                      (affiliateStats.registrations || 0)) *
                      100,
                    100,
                  ).toFixed(2)
                : "0.00";

            document.getElementById("visit-to-click-rate")!.textContent =
              `${visitToClickRate}%`;
            document.getElementById("click-to-register-rate")!.textContent =
              `${clickToRegisterRate}%`;
            document.getElementById("register-to-purchase-rate")!.textContent =
              `${registerToPurchaseRate}%`;
          } else {
            funnelAnalyticsElement.style.display = "none";
          }
        }
      } catch (error) {
        console.error("Error loading dashboard data:", error);
        const errorDiv = document.createElement("div");
        errorDiv.className = "alert alert-error mb-4";
        errorDiv.innerHTML = `<span>Error loading dashboard: ${error.message}</span>`;
        document.querySelector(".container")?.prepend(errorDiv);
      }
    }

    // Date filtering functionality
    function setupDateFiltering() {
      const dateFromInput = document.getElementById(
        "date-from",
      ) as HTMLInputElement;
      const dateToInput = document.getElementById(
        "date-to",
      ) as HTMLInputElement;
      const applyFilterBtn = document.getElementById("apply-date-filter");
      const resetFilterBtn = document.getElementById("reset-date-filter");

      // Leave date inputs empty by default to show all-time data
      currentDateRange.from = null;
      currentDateRange.to = null;

      applyFilterBtn?.addEventListener("click", () => {
        const fromDate = dateFromInput?.value || null;
        const toDate = dateToInput?.value || null;

        if (fromDate && toDate && fromDate > toDate) {
          alert("From date must be before or equal to To date");
          return;
        }

        currentDateRange.from = fromDate;
        currentDateRange.to = toDate;
        loadDashboardData(fromDate, toDate);
      });

      resetFilterBtn?.addEventListener("click", () => {
        if (dateFromInput) dateFromInput.value = "";
        if (dateToInput) dateToInput.value = "";
        currentDateRange.from = null;
        currentDateRange.to = null;
        loadDashboardData();
      });
    }

    // Load visitor journeys data
    async function loadVisitorJourneys(
      dateFrom: string | null = null,
      dateTo: string | null = null,
      page: string | null = null,
    ) {
      try {
        let journeyUrl = `http://localhost:1337/api/visitor-journeys`;
        const params = new URLSearchParams();

        if (dateFrom) params.append("dateFrom", dateFrom);
        if (dateTo) params.append("dateTo", dateTo);
        if (page) params.append("page", page);

        if (params.toString()) {
          journeyUrl += `?${params.toString()}`;
        }

        const journeyResponse = await fetch(journeyUrl, {
          headers: {
            Authorization: `Bearer ${jwt}`,
          },
        });

        if (journeyResponse.ok) {
          const journeyData = await journeyResponse.json();
          console.log("📊 Visitor journeys loaded:", journeyData);
          displayVisitorJourneys(journeyData);

          // Show the visitor journeys section
          const visitorJourneysElement =
            document.getElementById("visitor-journeys");
          if (visitorJourneysElement) {
            visitorJourneysElement.style.display = "block";
          }
        } else {
          console.warn(
            "Failed to load visitor journeys:",
            journeyResponse.status,
          );
        }
      } catch (error) {
        console.error("Error loading visitor journeys:", error);
      }
    }

    function displayVisitorJourneys(data) {
      const { journeys, summary } = data;

      // Update summary stats
      document.getElementById("total-visitors")!.textContent =
        summary.totalVisitors.toString();
      document.getElementById("avg-session-time")!.textContent =
        `${summary.averageSessionLength} min`;
      document.getElementById("total-page-views")!.textContent =
        summary.totalPageViews.toString();
      document.getElementById("top-page")!.textContent =
        summary.topPages[0]?.page || "-";

      // Display individual journeys
      const journeyListElement = document.getElementById("journey-list");
      if (!journeyListElement) return;

      if (journeys.length === 0) {
        journeyListElement.innerHTML = `
          <div class="text-center py-8 opacity-50">
            <p>No visitor journeys found for the selected period.</p>
          </div>
        `;
        return;
      }

      journeyListElement.innerHTML = journeys
        .map((journey, index) => {
          const duration =
            journey.events.length > 1
              ? Math.round(
                  (new Date(journey.lastActivity).getTime() -
                    new Date(journey.firstSeen).getTime()) /
                    1000 /
                    60,
                )
              : 0;

          const eventsList = journey.events
            .slice(-10)
            .map((event) => {
              const time = new Date(event.timestamp).toLocaleTimeString();
              const actionText = event.action
                .replace(/_/g, " ")
                .replace(/\b\w/g, (l) => l.toUpperCase());
              return `
            <div class="flex justify-between items-center py-1 text-sm">
              <span class="badge badge-sm ${getActionBadgeColor(event.action)}">${actionText}</span>
              <span class="opacity-70">${time}</span>
            </div>
          `;
            })
            .join("");

          return `
          <div class="collapse collapse-arrow bg-base-200">
            <input type="checkbox" ${index === 0 ? "checked" : ""} />
            <div class="collapse-title text-md font-medium">
              <div class="flex justify-between items-center">
                <div>
                  <span class="font-semibold">Visitor ${journey.visitorId.slice(0, 8)}...</span>
                  <span class="badge badge-outline ml-2">${journey.events.length} actions</span>
                </div>
                <div class="text-sm opacity-70">
                  ${duration} min session • ${journey.pages.length} pages
                </div>
              </div>
            </div>
            <div class="collapse-content">
              <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <h4 class="font-semibold mb-2">Session Info</h4>
                  <div class="space-y-1 text-sm">
                    <div><strong>Started:</strong> ${new Date(journey.firstSeen).toLocaleString()}</div>
                    <div><strong>Last Activity:</strong> ${new Date(journey.lastActivity).toLocaleString()}</div>
                    <div><strong>Pages Visited:</strong> ${journey.pages.join(", ")}</div>
                  </div>
                </div>
                <div>
                  <h4 class="font-semibold mb-2">Recent Actions</h4>
                  <div class="space-y-1 max-h-40 overflow-y-auto">
                    ${eventsList}
                  </div>
                </div>
              </div>
            </div>
          </div>
        `;
        })
        .join("");
    }

    function getActionBadgeColor(action) {
      const colorMap = {
        page_view: "badge-info",
        button_click: "badge-secondary",
        pricing_button_click: "badge-accent",
        registration_attempt: "badge-warning",
        registration_complete: "badge-success",
        checkout_initiated: "badge-primary",
        purchase_complete: "badge-success",
        form_submit: "badge-info",
        link_click: "badge-neutral",
      };
      return colorMap[action] || "badge-ghost";
    }

    // Setup visitor journey event handlers
    function setupVisitorJourneyHandlers() {
      const refreshButton = document.getElementById("refresh-journeys");
      const pageFilter = document.getElementById(
        "page-filter",
      ) as HTMLSelectElement;

      refreshButton?.addEventListener("click", () => {
        const selectedPage = pageFilter?.value || null;
        loadVisitorJourneys(
          currentDateRange.from,
          currentDateRange.to,
          selectedPage,
        );
      });

      pageFilter?.addEventListener("change", () => {
        const selectedPage = pageFilter.value || null;
        loadVisitorJourneys(
          currentDateRange.from,
          currentDateRange.to,
          selectedPage,
        );
      });
    }

    // Setup date filtering and load initial data (all-time by default)
    setupDateFiltering();
    setupVisitorJourneyHandlers();
    loadDashboardData();

    // Load visitor journeys after a short delay to avoid overwhelming the backend
    setTimeout(() => {
      loadVisitorJourneys();
    }, 1000);
  }
</script>
