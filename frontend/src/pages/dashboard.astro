---
import Layout from "../layouts/Layout.astro";
---

<Layout title="Marketing Dashboard">
  <main class="min-h-screen bg-base-200">
    <div class="navbar bg-base-100 shadow-md">
      <div class="flex-1">
        <a class="btn btn-ghost text-xl">Marketing Dashboard</a>
      </div>
      <div class="flex-none">
        <div class="dropdown dropdown-end">
          <label tabindex="0" class="btn btn-ghost">
            <span id="user-email">Loading...</span>
          </label>
          <ul
            tabindex="0"
            class="menu menu-sm dropdown-content mt-3 z-[1] p-2 shadow bg-base-100 rounded-box w-52"
          >
            <li><a id="logout-btn">Logout</a></li>
          </ul>
        </div>
      </div>
    </div>

    <div class="container mx-auto p-6">
      <!-- Date Range Selector -->
      <div class="card bg-base-100 shadow-lg mb-6">
        <div class="card-body">
          <h2 class="card-title">Date Range</h2>
          <div class="grid grid-cols-1 md:grid-cols-3 gap-4 items-end">
            <div class="form-control">
              <label class="label">
                <span class="label-text">From Date</span>
              </label>
              <input type="date" id="date-from" class="input input-bordered" />
            </div>
            <div class="form-control">
              <label class="label">
                <span class="label-text">To Date</span>
              </label>
              <input type="date" id="date-to" class="input input-bordered" />
            </div>
            <div class="form-control">
              <button class="btn btn-primary" id="apply-date-filter">
                Apply Filter
              </button>
              <button
                class="btn btn-outline btn-sm mt-2"
                id="reset-date-filter"
              >
                Show All Time
              </button>
            </div>
          </div>
        </div>
      </div>

      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
        <!-- Total Sales -->
        <div class="stat bg-base-100 shadow-lg rounded-lg">
          <div class="stat-title">Total Sales</div>
          <div class="stat-value" id="total-sales">$0</div>
          <div class="stat-desc" id="total-sales-desc">All time</div>
        </div>

        <!-- Total Commission -->
        <div class="stat bg-base-100 shadow-lg rounded-lg">
          <div class="stat-title">Your Commission</div>
          <div class="stat-value text-success" id="total-commission">$0</div>
          <div class="stat-desc" id="total-commission-desc">All time</div>
        </div>

        <!-- Conversion Rate -->
        <div class="stat bg-base-100 shadow-lg rounded-lg">
          <div class="stat-title">Conversion Rate</div>
          <div class="stat-value" id="conversion-rate">0%</div>
          <div class="stat-desc" id="conversion-rate-desc">All time</div>
        </div>
      </div>

      <!-- Recent Sales -->
      <div class="card bg-base-100 shadow-lg">
        <div class="card-body">
          <h2 class="card-title">Sales</h2>
          <div class="overflow-x-auto">
            <table class="table">
              <thead>
                <tr>
                  <th>Date</th>
                  <th>Customer</th>
                  <th>Amount</th>
                  <th>Commission</th>
                  <th>Status</th>
                </tr>
              </thead>
              <tbody id="sales-table">
                <tr>
                  <td colspan="5" class="text-center">Loading...</td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>
      </div>

      <!-- Affiliate Link Generator -->
      <div class="card bg-base-100 shadow-lg mt-6">
        <div class="card-body">
          <h2 class="card-title">Your Affiliate Link</h2>
          <div class="form-control">
            <label class="label">
              <span class="label-text">Your unique affiliate code:</span>
            </label>
            <div class="input-group">
              <input
                type="text"
                id="affiliate-code"
                class="input input-bordered flex-1"
                readonly
              />
              <button class="btn btn-primary" id="copy-code">Copy</button>
            </div>
          </div>
          <div class="form-control mt-4">
            <label class="label">
              <span class="label-text">Your affiliate link:</span>
            </label>
            <div class="input-group">
              <input
                type="text"
                id="affiliate-link"
                class="input input-bordered flex-1"
                readonly
              />
              <button class="btn btn-primary" id="copy-link">Copy</button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </main>
</Layout>

<script>
  // Check if user is logged in
  const jwt = localStorage.getItem("jwt");
  const user = JSON.parse(localStorage.getItem("user") || "{}");

  if (!jwt || !user.id) {
    window.location.href = "/login";
  } else {
    // Display user email
    const userEmailElement = document.getElementById("user-email");
    if (userEmailElement) {
      userEmailElement.textContent = user.email || "User";
    }

    // Rest of the initialization code will go here

    // Logout functionality
    document.getElementById("logout-btn")?.addEventListener("click", () => {
      localStorage.removeItem("jwt");
      localStorage.removeItem("user");
      window.location.href = "/login";
    });

    // Copy functionality
    document.getElementById("copy-code")?.addEventListener("click", () => {
      const codeInput = document.getElementById(
        "affiliate-code",
      ) as HTMLInputElement;
      if (codeInput) {
        codeInput.select();
        document.execCommand("copy");
        alert("Affiliate code copied!");
      }
    });

    document.getElementById("copy-link")?.addEventListener("click", () => {
      const linkInput = document.getElementById(
        "affiliate-link",
      ) as HTMLInputElement;
      if (linkInput) {
        linkInput.select();
        document.execCommand("copy");
        alert("Affiliate link copied!");
      }
    });

    // Load dashboard data
    let currentDateRange: { from: string | null; to: string | null } = {
      from: null,
      to: null,
    };

    async function loadDashboardData(
      dateFrom: string | null = null,
      dateTo: string | null = null,
    ) {
      try {
        const cmsUrl =
          document.documentElement.getAttribute("data-cms-url") ||
          "http://localhost:1337";

        // Double-check authentication before making API calls
        const jwt = localStorage.getItem("jwt");
        if (!jwt) {
          window.location.href = "/login";
          return;
        }

        // Get user's affiliate data
        const affiliateResponse = await fetch(`${cmsUrl}/api/my-affiliates`, {
          headers: {
            Authorization: `Bearer ${jwt}`,
          },
        });

        if (!affiliateResponse.ok) {
          if (
            affiliateResponse.status === 401 ||
            affiliateResponse.status === 403
          ) {
            // Authentication failed, redirect to login
            localStorage.removeItem("jwt");
            localStorage.removeItem("user");
            window.location.href = "/login";
            return;
          }
          throw new Error("Failed to fetch affiliate data");
        }

        const affiliateData = await affiliateResponse.json();
        let affiliate = affiliateData.data?.[0];

        // Create affiliate if doesn't exist
        if (!affiliate) {
          console.log("Creating new affiliate record...");
          const createResponse = await fetch(`${cmsUrl}/api/my-affiliates`, {
            method: "POST",
            headers: {
              Authorization: `Bearer ${jwt}`,
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              data: {
                email: user.email,
                name: user.username || user.email,
                isActive: true,
              },
            }),
          });

          if (!createResponse.ok) {
            const errorData = await createResponse.json();
            console.error("Failed to create affiliate:", errorData);
            throw new Error("Failed to create affiliate record");
          }

          const createData = await createResponse.json();
          affiliate = createData.data;
          console.log("Affiliate created:", affiliate);
        }

        // Update affiliate code and link
        const codeInput = document.getElementById(
          "affiliate-code",
        ) as HTMLInputElement;
        const linkInput = document.getElementById(
          "affiliate-link",
        ) as HTMLInputElement;

        if (codeInput && linkInput && affiliate) {
          const affiliateCode =
            affiliate.attributes?.code || affiliate.code || `user_${user.id}`;
          codeInput.value = affiliateCode;
          linkInput.value = `${window.location.origin}/pricing?ref=${affiliateCode}`;
        }

        // Build purchase API URL with date filtering
        let purchaseUrl = `${cmsUrl}/api/my-purchases?populate=*`;

        // Add date filters if specified
        if (dateFrom) {
          purchaseUrl += `&filters[createdAt][$gte]=${dateFrom}T00:00:00.000Z`;
        }
        if (dateTo) {
          purchaseUrl += `&filters[createdAt][$lte]=${dateTo}T23:59:59.999Z`;
        }

        // Get purchases for this affiliate
        const purchasesResponse = await fetch(purchaseUrl, {
          headers: {
            Authorization: `Bearer ${jwt}`,
          },
        });

        let purchases = [];
        if (purchasesResponse.ok) {
          const purchasesData = await purchasesResponse.json();
          purchases = purchasesData.data || [];
        }

        // Calculate stats for the filtered purchases
        const totalSales = purchases.reduce((sum: number, purchase: any) => {
          return sum + (purchase.amount || 0);
        }, 0);

        const totalCommission = purchases.reduce(
          (sum: number, purchase: any) => {
            return sum + (purchase.commissionAmount || 0);
          },
          0,
        );

        // Simple conversion rate calculation (could be improved with more data)
        const conversionRate =
          purchases.length > 0
            ? ((purchases.length / (purchases.length + 10)) * 100).toFixed(1)
            : "0";

        // Update stats descriptions based on date range
        let dateRangeDesc = "All time";
        if (dateFrom && dateTo) {
          const fromDateFormatted = new Date(dateFrom).toLocaleDateString();
          const toDateFormatted = new Date(dateTo).toLocaleDateString();
          dateRangeDesc = `${fromDateFormatted} to ${toDateFormatted}`;
        } else if (dateFrom) {
          const fromDateFormatted = new Date(dateFrom).toLocaleDateString();
          dateRangeDesc = `From ${fromDateFormatted}`;
        } else if (dateTo) {
          const toDateFormatted = new Date(dateTo).toLocaleDateString();
          dateRangeDesc = `Until ${toDateFormatted}`;
        }

        // Update stats
        const totalSalesElement = document.getElementById("total-sales");
        const totalCommissionElement =
          document.getElementById("total-commission");
        const conversionRateElement =
          document.getElementById("conversion-rate");
        const totalSalesDescElement =
          document.getElementById("total-sales-desc");
        const totalCommissionDescElement = document.getElementById(
          "total-commission-desc",
        );
        const conversionRateDescElement = document.getElementById(
          "conversion-rate-desc",
        );

        if (totalSalesElement)
          totalSalesElement.textContent = `$${totalSales.toFixed(2)}`;
        if (totalCommissionElement)
          totalCommissionElement.textContent = `$${totalCommission.toFixed(2)}`;
        if (conversionRateElement)
          conversionRateElement.textContent = `${conversionRate}%`;

        if (totalSalesDescElement)
          totalSalesDescElement.textContent = dateRangeDesc;
        if (totalCommissionDescElement)
          totalCommissionDescElement.textContent = dateRangeDesc;
        if (conversionRateDescElement)
          conversionRateDescElement.textContent = dateRangeDesc;

        // Update sales table
        const salesTableElement = document.getElementById("sales-table");
        if (salesTableElement) {
          if (purchases.length === 0) {
            salesTableElement.innerHTML =
              '<tr><td colspan="5" class="text-center">No sales found for the selected period. Share your affiliate link to start earning!</td></tr>';
          } else {
            // Sort purchases by date (newest first) and show all
            const sortedPurchases = purchases.sort((a: any, b: any) => {
              const dateA = new Date(a.createdAt);
              const dateB = new Date(b.createdAt);
              return dateB.getTime() - dateA.getTime();
            });

            salesTableElement.innerHTML = sortedPurchases
              .map((purchase: any) => {
                const date = new Date(purchase.createdAt).toLocaleDateString();
                const amount = purchase.amount || 0;
                const commission = purchase.commissionAmount || 0;
                const status = purchase.status || "completed";
                const customerEmail = purchase.customerEmail || "Anonymous";

                return `
              <tr>
                <td>${date}</td>
                <td>${customerEmail}</td>
                <td>$${amount.toFixed(2)}</td>
                <td class="text-success">$${commission.toFixed(2)}</td>
                <td><span class="badge badge-${status === "completed" ? "success" : "warning"}">${status}</span></td>
              </tr>
            `;
              })
              .join("");
          }
        }
      } catch (error) {
        console.error("Error loading dashboard data:", error);
        const errorDiv = document.createElement("div");
        errorDiv.className = "alert alert-error mb-4";
        errorDiv.innerHTML = `<span>Error loading dashboard: ${error.message}</span>`;
        document.querySelector(".container")?.prepend(errorDiv);
      }
    }

    // Date filtering functionality
    function setupDateFiltering() {
      const dateFromInput = document.getElementById(
        "date-from",
      ) as HTMLInputElement;
      const dateToInput = document.getElementById(
        "date-to",
      ) as HTMLInputElement;
      const applyFilterBtn = document.getElementById("apply-date-filter");
      const resetFilterBtn = document.getElementById("reset-date-filter");

      // Leave date inputs empty by default to show all-time data
      currentDateRange.from = null;
      currentDateRange.to = null;

      applyFilterBtn?.addEventListener("click", () => {
        const fromDate = dateFromInput?.value || null;
        const toDate = dateToInput?.value || null;

        if (fromDate && toDate && fromDate > toDate) {
          alert("From date must be before or equal to To date");
          return;
        }

        currentDateRange.from = fromDate;
        currentDateRange.to = toDate;
        loadDashboardData(fromDate, toDate);
      });

      resetFilterBtn?.addEventListener("click", () => {
        if (dateFromInput) dateFromInput.value = "";
        if (dateToInput) dateToInput.value = "";
        currentDateRange.from = null;
        currentDateRange.to = null;
        loadDashboardData();
      });
    }

    // Setup date filtering and load initial data (all-time by default)
    setupDateFiltering();
    loadDashboardData();
  } // End of else block
</script>
