---
import Layout from "../layouts/Layout.astro";
---

<Layout title="CRM Leads">
  <main class="min-h-screen bg-base-200">
    <div class="navbar bg-base-100 shadow-md">
      <div class="flex-1">
        <a class="btn btn-ghost text-xl" href="/dashboard">CRM Leads</a>
      </div>
      <div class="flex-none gap-2">
        <a href="/dashboard" class="btn btn-outline">Dashboard</a>
        <a href="/site-editor" class="btn btn-outline">Site Editor</a>
        <div class="dropdown dropdown-end">
          <label tabindex="0" class="btn btn-ghost">
            <span id="user-email">Loading...</span>
          </label>
          <ul
            tabindex="0"
            class="menu menu-sm dropdown-content mt-3 z-[1] p-2 shadow bg-base-100 rounded-box w-52"
          >
            <li><a id="logout-btn">Logout</a></li>
          </ul>
        </div>
      </div>
    </div>

    <div class="container mx-auto p-6">
      <div class="card bg-base-100 shadow-lg">
        <div class="card-body">
          <h2 class="card-title">Leads</h2>
          <div class="flex justify-end mb-4">
            <button class="btn btn-primary" id="add-lead-btn">Add Lead</button>
          </div>
          <div class="overflow-x-auto">
            <table class="table" id="leads-table">
              <thead>
                <tr>
                  <th>Name</th>
                  <th>Email</th>
                  <th>Status</th>
                  <th>Assigned To</th>
                  <th></th>
                </tr>
              </thead>
              <tbody id="leads-body"></tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
    <dialog id="lead-modal" class="modal">
      <form id="lead-form" class="modal-box">
        <h3 class="font-bold text-lg">Lead</h3>
        <div class="form-control">
          <label class="label">Full Name</label>
          <input id="lead-name" class="input input-bordered" required />
        </div>
        <div class="form-control mt-2">
          <label class="label">Email</label>
          <input
            id="lead-email"
            type="email"
            class="input input-bordered"
            required
          />
        </div>
        <div class="form-control mt-2">
          <label class="label">Status</label>
          <input id="lead-status" class="input input-bordered" />
        </div>
        <div class="modal-action">
          <button type="submit" class="btn btn-primary">Save</button>
          <button type="button" class="btn" onclick="leadModal.close()">
            Cancel
          </button>
        </div>
      </form>
      <form method="dialog" class="modal-backdrop">
        <button>close</button>
      </form>
    </dialog>
  </main>
</Layout>

<script>
  const jwt = localStorage.getItem("jwt");
  const user = JSON.parse(localStorage.getItem("user") || "{}");
  if (!jwt || !user.id) {
    window.location.href = "/login";
  } else {
    const userEmailElement = document.getElementById("user-email");
    if (userEmailElement) {
      userEmailElement.textContent = user.email || "User";
    }
    document.getElementById("logout-btn")?.addEventListener("click", () => {
      localStorage.removeItem("jwt");
      localStorage.removeItem("user");
      window.location.href = "/login";
    });
    const cmsUrl =
      document.documentElement.getAttribute("data-cms-url") ||
      "http://localhost:1337";
    const leadModal = document.getElementById("lead-modal");
    const leadForm = document.getElementById("lead-form");
    const nameInput = document.getElementById("lead-name");
    const emailInput = document.getElementById("lead-email");
    const statusInput = document.getElementById("lead-status");
    let editingId = null;

    document
      .getElementById("add-lead-btn")
      ?.addEventListener("click", () => {
        editingId = null;
        if (nameInput) nameInput.value = "";
        if (emailInput) emailInput.value = "";
        if (statusInput) statusInput.value = "";
        leadModal?.showModal();
      });

    leadForm?.addEventListener("submit", async (e) => {
      e.preventDefault();
      const payload = {
        data: {
          fullName: nameInput?.value || "",
          email: emailInput?.value || "",
          status: statusInput?.value || "",
        },
      };
      const url = editingId
        ? `${cmsUrl}/api/leads/${editingId}`
        : `${cmsUrl}/api/leads`;
      const method = editingId ? "PUT" : "POST";
      await fetch(url, {
        method,
        headers: {
          Authorization: `Bearer ${jwt}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify(payload),
      });
      leadModal?.close();
      loadLeads();
    });

    async function loadLeads() {
      const res = await fetch(`${cmsUrl}/api/leads?populate=assignedTo`, {
        headers: { Authorization: `Bearer ${jwt}` },
      });
      const data = await res.json();
      const body = document.getElementById("leads-body");
      if (!body) return;
      body.innerHTML = "";
      (data.data || []).forEach((item) => {
        const lead = item.attributes;
        const assigned = lead.assignedTo?.data?.attributes?.email || "";
        const tr = document.createElement("tr");
        tr.innerHTML = `
          <td>${lead.fullName || ""}</td>
          <td>${lead.email || ""}</td>
          <td>${lead.status || ""}</td>
          <td>${assigned}</td>
          <td></td>
        `;
        const actions = document.createElement("div");
        actions.className = "flex gap-2";
        if (!assigned) {
          const claimBtn = document.createElement("button");
          claimBtn.className = "btn btn-sm btn-primary";
          claimBtn.textContent = "Claim";
          claimBtn.addEventListener("click", async () => {
            await fetch(`${cmsUrl}/api/leads/${item.id}/claim`, {
              method: "POST",
              headers: { Authorization: `Bearer ${jwt}` },
            });
            loadLeads();
          });
          actions.appendChild(claimBtn);
        }
        const editBtn = document.createElement("button");
        editBtn.className = "btn btn-sm";
        editBtn.textContent = "Edit";
        editBtn.addEventListener("click", () => {
          editingId = item.id;
          if (nameInput) nameInput.value = lead.fullName || "";
          if (emailInput) emailInput.value = lead.email || "";
          if (statusInput) statusInput.value = lead.status || "";
          leadModal?.showModal();
        });
        actions.appendChild(editBtn);
        const delBtn = document.createElement("button");
        delBtn.className = "btn btn-sm btn-error";
        delBtn.textContent = "Delete";
        delBtn.addEventListener("click", async () => {
          if (confirm("Delete this lead?")) {
            await fetch(`${cmsUrl}/api/leads/${item.id}`, {
              method: "DELETE",
              headers: { Authorization: `Bearer ${jwt}` },
            });
            loadLeads();
          }
        });
        actions.appendChild(delBtn);
        tr.lastElementChild?.appendChild(actions);
        body.appendChild(tr);
      });
    }
    loadLeads();
  }
</script>
