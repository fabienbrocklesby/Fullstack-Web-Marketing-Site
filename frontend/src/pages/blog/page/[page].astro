---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
import Footer from "../../../components/Footer.astro";
import { getPaginatedPosts, type Post } from "../../../lib/strapi";

// Disable prerendering to always fetch fresh posts from Strapi
export const prerender = false;

export async function getStaticPaths() {
  // Return empty array since we're using SSR
  return [];
}

const pageParam = Number(Astro.params.page || 1) || 1;
const { posts, pagination } = await getPaginatedPosts(pageParam, 9);
const siteBase = Astro.site ? Astro.site.href.replace(/\/$/, "") : "";
const currentUrl = siteBase + `/blog/page/${pagination.page}`;
const canonical = pagination.page === 1 ? siteBase + "/blog" : currentUrl;
const pageTitleBase = "Blog - SaaS Boilerplate";
const title =
  pagination.page > 1
    ? `${pageTitleBase} (Page ${pagination.page})`
    : pageTitleBase;
---

<Layout
  title={title}
  description="Latest insights and tutorials about SaaS development"
  canonical={canonical}
  ogType="website"
>
  <Header />
  <main>
    <section class="py-20">
      <div class="container mx-auto px-4">
        <div class="text-center mb-12">
          <h1 class="text-4xl font-bold mb-4">Blog</h1>
          <p class="text-xl text-base-content/70">
            Latest insights and tutorials about SaaS development
          </p>
        </div>
        {
          posts.length === 0 ? (
            <div class="text-center text-base-content/70">
              No posts on this page.
            </div>
          ) : (
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 max-w-6xl mx-auto">
              {posts.map((post) => (
                <a
                  href={`/blog/${post.slug}`}
                  class="card bg-base-200 shadow-lg transition hover:shadow-xl overflow-hidden group focus:outline-none focus-visible:ring-2 focus-visible:ring-primary"
                  aria-label={`Read blog post: ${post.title}`}
                >
                  {post.coverImageUrl && (
                    <figure class="w-full h-44 overflow-hidden bg-base-300">
                      <img
                        src={post.coverImageUrl}
                        alt={post.coverImageAlt || post.title}
                        class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-[1.03]"
                        loading="lazy"
                      />
                    </figure>
                  )}
                  <div class="card-body">
                    <h3 class="card-title text-xl mb-2 group-hover:text-primary">
                      {post.title}
                    </h3>
                    <p class="text-base-content/70 text-sm leading-relaxed mb-4 line-clamp-4">
                      {post.preview || post.excerpt}
                    </p>
                    <div class="flex justify-between items-center text-xs text-base-content/60">
                      <span>{post.author}</span>
                      <span>{new Date(post.date).toLocaleDateString()}</span>
                    </div>
                  </div>
                </a>
              ))}
            </div>
          )
        }

        <div
          class="mt-16 flex items-center justify-center gap-2 flex-wrap"
          aria-label="Pagination navigation"
        >
          {
            pagination.page > 1 && (
              <a
                href={
                  pagination.page - 1 === 1
                    ? "/blog"
                    : `/blog/page/${pagination.page - 1}`
                }
                class="btn btn-sm btn-outline"
                rel="prev"
              >
                Previous
              </a>
            )
          }
          {
            Array.from({ length: pagination.pageCount })
              .slice(0, 12)
              .map((_, i) => {
                const p = i + 1;
                const href = p === 1 ? "/blog" : `/blog/page/${p}`;
                const active = p === pagination.page;
                return (
                  <a
                    href={href}
                    class={`btn btn-sm ${active ? "btn-primary" : "btn-soft"}`}
                    aria-current={active ? "page" : undefined}
                  >
                    {p}
                  </a>
                );
              })
          }
          {
            pagination.page < pagination.pageCount && (
              <a
                href={`/blog/page/${pagination.page + 1}`}
                class="btn btn-sm btn-outline"
                rel="next"
              >
                Next
              </a>
            )
          }
        </div>
      </div>
    </section>
  </main>
  <Footer />
</Layout>
