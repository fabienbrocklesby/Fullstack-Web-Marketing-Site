---
import Layout from "../../layouts/Layout.astro";
---

<Layout title="Customer Login">
  <main class="hero min-h-screen bg-base-200">
    <div class="hero-content text-center">
      <div class="max-w-md">
        <div class="card w-full max-w-sm shadow-2xl bg-base-100">
          <div class="card-body">
            <h1 class="text-2xl font-bold mb-6">Customer Login</h1>
            <form id="login-form">
              <div class="form-control">
                <label class="label">
                  <span class="label-text">Email</span>
                </label>
                <input
                  type="email"
                  id="email"
                  placeholder="email@example.com"
                  class="input input-bordered"
                  required
                />
              </div>
              <div class="form-control">
                <label class="label">
                  <span class="label-text">Password</span>
                </label>
                <input
                  type="password"
                  id="password"
                  placeholder="password"
                  class="input input-bordered"
                  required
                />
              </div>
              <div class="form-control mt-6">
                <button type="submit" class="btn btn-primary">Login</button>
              </div>
            </form>
            <div id="error-message" class="alert alert-error mt-4 hidden">
              <span id="error-text"></span>
            </div>
            <p class="text-center mt-4">
              Have an invite code? <a
                href="/join"
                class="link link-primary">Join here</a
              >
            </p>
          </div>
        </div>
      </div>
    </div>
  </main>
</Layout>

<script>
  document
    .getElementById("login-form")
    ?.addEventListener("submit", async (e) => {
      e.preventDefault();

      const emailInput = document.getElementById("email") as HTMLInputElement;
      const passwordInput = document.getElementById(
        "password",
      ) as HTMLInputElement;
      const errorDiv = document.getElementById("error-message");
      const errorText = document.getElementById("error-text");

      if (!emailInput || !passwordInput || !errorDiv || !errorText) return;

      // Hide previous error
      errorDiv.classList.add("hidden");

      try {
        const cmsUrl =
          document.documentElement.getAttribute("data-cms-url") ||
          "http://localhost:1337";

        // Get affiliate code from storage for tracking
        const affiliateCode =
          document.cookie
            .split("; ")
            .find((row) => row.startsWith("affiliate_code="))
            ?.split("=")[1] || localStorage.getItem("affiliate_code");

        const response = await fetch(`${cmsUrl}/api/customers/login`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            email: emailInput.value,
            password: passwordInput.value,
          }),
        });

        const data = await response.json();

        if (!response.ok) {
          throw new Error(data.error || "Login failed");
        }

        // Store the customer token
        localStorage.setItem("customerToken", data.token);
        localStorage.setItem("customer", JSON.stringify(data.customer));

        // Track login if from affiliate link
        if (
          affiliateCode &&
          typeof (window as any).trackConversionEvent === "function"
        ) {
          await (window as any).trackConversionEvent(
            affiliateCode,
            "customer_login",
            {
              customerId: data.customer.id,
              email: data.customer.email,
              hasSelectedProduct: !!localStorage.getItem("selectedProduct"),
              timestamp: new Date().toISOString(),
            },
          );
        }

        // Check URL parameters for product selection and redirect
        const urlParams = new URLSearchParams(window.location.search);
        const productId = urlParams.get("product");
        const redirectType = urlParams.get("redirect");

        // Check if there's a selected product in localStorage
        const selectedProduct = localStorage.getItem("selectedProduct");

        if ((productId && redirectType === "checkout") || selectedProduct) {
          // Redirect to checkout flow
          const priceId =
            productId ||
            (selectedProduct ? JSON.parse(selectedProduct).priceId : null);
          if (
            priceId &&
            typeof (window as any).proceedToCheckout === "function"
          ) {
            await (window as any).proceedToCheckout(priceId);
          } else {
            window.location.href = "/customer/dashboard";
          }
        } else {
          // Normal login flow - redirect to customer dashboard
          window.location.href = "/customer/dashboard";
        }
      } catch (error) {
        errorDiv.classList.remove("hidden");
        errorText.textContent =
          error instanceof Error ? error.message : "Login failed";
      }
    });
</script>
