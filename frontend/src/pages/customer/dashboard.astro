---
import Layout from "../../layouts/Layout.astro";
---

<Layout title="Customer Dashboard">
  <main class="min-h-screen bg-base-200">
    <div class="navbar bg-base-100">
      <div class="navbar-start">
        <div class="dropdown">
          <label tabindex="0" class="btn btn-ghost lg:hidden">
            <svg
              class="w-5 h-5"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M4 6h16M4 12h8m-8 6h16"></path>
            </svg>
          </label>
          <ul
            tabindex="0"
            class="menu menu-compact dropdown-content mt-3 p-2 shadow bg-base-100 z-50 rounded-box w-52"
          >
            <li><a href="/customer/dashboard">Dashboard</a></li>
            <li><a href="/customer/profile">Profile</a></li>
          </ul>
        </div>
        <a href="/customer/dashboard" class="btn btn-ghost normal-case text-xl"
          >Customer Portal</a
        >
      </div>
      <div class="navbar-center hidden lg:flex">
        <ul class="menu menu-horizontal px-1">
          <li><a href="/customer/dashboard">Dashboard</a></li>
          <li><a href="/customer/profile">Profile</a></li>
        </ul>
      </div>
      <div class="navbar-end">
        <div class="dropdown dropdown-end">
          <label tabindex="0" class="btn btn-ghost">
            <span id="customer-name">Customer</span>
            <svg
              class="w-4 h-4 ml-1"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M19 9l-7 7-7-7"></path>
            </svg>
          </label>

          <ul
            tabindex="0"
            class="menu menu-compact dropdown-content z-50 mt-3 p-2 shadow bg-base-100 rounded-box w-52"
          >
            <li><a href="/customer/profile">Profile</a></li>
            <li><a id="logout-btn">Logout</a></li>
          </ul>
        </div>
      </div>
    </div>

    <div class="container mx-auto px-4 py-8">
      <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
        <!-- Customer Info Card -->
        <div class="card bg-base-100 shadow-xl">
          <div class="card-body">
            <h2 class="card-title">
              <div class="avatar placeholder">
                <div
                  class="bg-neutral-focus text-neutral-content rounded-full w-8"
                >
                  <span class="text-xs" id="customer-initials">CU</span>
                </div>
              </div>
              Account Info
            </h2>
            <div class="space-y-2">
              <div>
                <span class="text-sm opacity-70">Name:</span>
                <span id="customer-full-name" class="ml-2">Loading...</span>
              </div>
              <div>
                <span class="text-sm opacity-70">Email:</span>
                <span id="customer-email" class="ml-2">Loading...</span>
              </div>
              <div>
                <span class="text-sm opacity-70">Customer ID:</span>
                <span id="customer-id" class="ml-2">Loading...</span>
              </div>
            </div>
          </div>
        </div>

        <!-- Quick Stats -->
        <div class="card bg-base-100 shadow-xl">
          <div class="card-body">
            <h2 class="card-title">Quick Stats</h2>
            <div class="stats stats-vertical">
              <div class="stat">
                <div class="stat-title">Total Licenses</div>
                <div class="stat-value text-primary" id="total-licenses">0</div>
              </div>
              <div class="stat">
                <div class="stat-title">Active Licenses</div>
                <div class="stat-value text-success" id="active-licenses">
                  0
                </div>
              </div>
              <div class="stat">
                <div class="stat-title">Available Licenses</div>
                <div class="stat-value text-info" id="available-licenses">
                  0
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Recent Activity -->
        <div class="card bg-base-100 shadow-xl">
          <div class="card-body">
            <h2 class="card-title">Recent Activity</h2>
            <div id="recent-activity" class="space-y-2">
              <div class="text-sm opacity-70">Loading recent activity...</div>
            </div>
          </div>
        </div>
      </div>

      <!-- License Keys Section -->
      <div class="card bg-base-100 shadow-xl mt-8">
        <div class="card-body">
          <div class="flex justify-between items-center mb-4">
            <h2 class="card-title">Your License Keys</h2>
            <a href="/pricing" class="btn btn-primary btn-sm">
              <svg
                class="w-4 h-4 mr-1"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
              </svg>
              Purchase License
            </a>
          </div>
          <div id="license-keys-container">
            <div class="text-center py-8">
              <div class="loading loading-spinner loading-lg"></div>
              <p class="mt-4">Loading your license keys...</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </main>

  <!-- Generate Activation Code Modal -->
  <dialog id="generate_activation_modal" class="modal">
    <div class="modal-box max-w-4xl">
      <h3 class="font-bold text-lg">Generate Activation Code</h3>

      <!-- Step 1: Get MAC Address -->
      <div id="mac-address-step">
        <div class="alert alert-info mb-4">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            class="stroke-current shrink-0 w-6 h-6"
            ><path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
            ></path></svg
          >
          <span
            >For security, activation codes are bound to your specific machine.
            Please get your MAC address first.</span
          >
        </div>

        <div class="tabs tabs-boxed mb-4">
          <a class="tab tab-active" onclick="showMacInstructions('windows')"
            >Windows</a
          >
          <a class="tab" onclick="showMacInstructions('macos')">macOS</a>
          <a class="tab" onclick="showMacInstructions('linux')">Linux</a>
        </div>

        <div id="mac-instructions">
          <!-- Windows Instructions -->
          <div id="windows-instructions" class="mac-instruction">
            <h4 class="font-semibold mb-2">Windows Command:</h4>
            <div class="mockup-code mb-2">
              <pre
                data-prefix="$"><code>getmac /fo csv | findstr /V "Transport Name" | head -n 1</code></pre>
            </div>
            <p class="text-sm mb-2">Or use this simpler command:</p>
            <div class="mockup-code mb-2">
              <pre data-prefix="$"><code>getmac</code></pre>
            </div>
            <button
              class="btn btn-outline btn-sm"
              onclick="copyCommand('getmac')">Copy Command</button
            >
          </div>

          <!-- macOS Instructions -->
          <div id="macos-instructions" class="mac-instruction hidden">
            <h4 class="font-semibold mb-2">macOS Command:</h4>
            <div class="mockup-code mb-2">
              <pre
                data-prefix="$"><code>ifconfig en0 | grep ether | awk '&#123;print $2&#125;'</code></pre>
            </div>
            <p class="text-sm mb-2">
              Alternative command (if en0 doesn't work):
            </p>
            <div class="mockup-code mb-2">
              <pre
                data-prefix="$"><code>networksetup -getmacaddress Wi-Fi | awk '&#123;print $3&#125;'</code></pre>
            </div>
            <button
              class="btn btn-outline btn-sm"
              onclick="copyCommand('ifconfig en0 | grep ether | awk \'{print $2}\'')"
              >Copy Command</button
            >
          </div>

          <!-- Linux Instructions -->
          <div id="linux-instructions" class="mac-instruction hidden">
            <h4 class="font-semibold mb-2">Linux Command:</h4>
            <div class="mockup-code mb-2">
              <pre
                data-prefix="$"><code>ip link show | grep -A1 -E "^[0-9]+: (eth|wlan|enp)" | grep link/ether | head -n 1 | awk '&#123;print $2&#125;'</code></pre>
            </div>
            <p class="text-sm mb-2">Alternative command:</p>
            <div class="mockup-code mb-2">
              <pre
                data-prefix="$"><code>cat /sys/class/net/*/address | head -n 1</code></pre>
            </div>
            <button
              class="btn btn-outline btn-sm"
              onclick="copyCommand('ip link show | grep -A1 -E &quot;^[0-9]+: (eth|wlan|enp)&quot; | grep link/ether | head -n 1 | awk \'{print $2}\'')"
              >Copy Command</button
            >
          </div>
        </div>

        <div class="form-control mt-4">
          <label class="label">
            <span class="label-text">Enter Your MAC Address:</span>
          </label>
          <input
            type="text"
            id="macAddressInput"
            placeholder="XX:XX:XX:XX:XX:XX"
            class="input input-bordered w-full"
            pattern="^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$"
          />
          <div class="label">
            <span class="label-text-alt"
              >Format: XX:XX:XX:XX:XX:XX (letters can be upper or lowercase)</span
            >
          </div>
        </div>

        <div class="modal-action">
          <button class="btn btn-primary" onclick="proceedToActivation()"
            >Generate Activation Code</button
          >
          <form method="dialog"><button class="btn">Cancel</button></form>
        </div>
      </div>

      <!-- Step 2: Activation Code Display -->
      <div id="activation-code-step" class="hidden">
        <div class="alert alert-success mb-4">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            class="stroke-current shrink-0 w-6 h-6"
            ><path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg
          >
          <span
            >Activation code generated! This code will only work on the machine
            with the MAC address you provided.</span
          >
        </div>

        <div class="form-control">
          <label class="label">
            <span class="label-text font-semibold">Your Activation Code:</span>
          </label>
          <div class="join w-full">
            <input
              type="text"
              id="activationCodeDisplay"
              class="input input-bordered join-item flex-1"
              readonly
            />
            <button
              class="btn btn-primary join-item"
              onclick="copyActivationCode()">Copy</button
            >
          </div>
        </div>

        <div class="form-control mt-4">
          <label class="label">
            <span class="label-text">Bound to MAC Address:</span>
          </label>
          <input
            type="text"
            id="boundMacDisplay"
            class="input input-bordered"
            readonly
          />
        </div>

        <div class="alert alert-warning mt-4">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            class="stroke-current shrink-0 w-6 h-6"
            ><path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 15.5c-.77.833.192 2.5 1.732 2.5z"
            ></path></svg
          >
          <div>
            <p class="font-semibold">Important Security Notice:</p>
            <ul class="list-disc list-inside text-sm mt-2">
              <li>
                This activation code will ONLY work on the machine with MAC
                address: <span id="securityMacDisplay" class="font-mono"></span>
              </li>
              <li>The code cannot be transferred to other machines</li>
              <li>This prevents unauthorized license sharing</li>
            </ul>
          </div>
        </div>

        <div class="modal-action">
          <button class="btn btn-outline" onclick="resetActivationModal()"
            >Generate Another</button
          >
          <form method="dialog"><button class="btn">Done</button></form>
        </div>
      </div>
    </div>
    <form method="dialog" class="modal-backdrop"><button>close</button></form>
  </dialog>

  <!-- Deactivation Modal -->
  <dialog id="deactivation_modal" class="modal">
    <div class="modal-box">
      <h3 class="font-bold text-lg">Offline Deactivation</h3>
      <p class="py-4">
        Paste the deactivation code from your application below to deactivate
        this license.
      </p>
      <div class="form-control">
        <textarea
          id="deactivation_code_textarea"
          class="textarea textarea-bordered h-32"
          placeholder="Paste deactivation code here..."></textarea>
      </div>
      <div class="text-center mt-2 hidden" id="deactivation-loading">
        <span class="loading loading-spinner"></span>
      </div>
      <div class="modal-action">
        <button class="btn btn-primary" onclick="submitDeactivation()"
          >Submit Deactivation</button
        >
        <form method="dialog">
          <button class="btn">Close</button>
        </form>
      </div>
    </div>
    <form method="dialog" class="modal-backdrop"><button>close</button></form>
  </dialog>
</Layout>

<script>
  // Check if customer is logged in
  const customerToken = localStorage.getItem("customerToken");
  const customer = JSON.parse(localStorage.getItem("customer") || "{}");

  if (!customerToken || !customer.id) {
    window.location.href = "/customer/login";
  } else {
    // Customer info will be loaded from API, not localStorage

    // Logout functionality
    document.getElementById("logout-btn")?.addEventListener("click", () => {
      localStorage.removeItem("customerToken");
      localStorage.removeItem("customer");
      window.location.href = "/customer/login";
    });

    // Load dashboard data
    async function loadDashboardData() {
      try {
        const cmsUrl =
          document.documentElement.getAttribute("data-cms-url") ||
          "http://localhost:1337";

        // Get customer profile
        const profileResponse = await fetch(`${cmsUrl}/api/customers/me`, {
          headers: {
            Authorization: `Bearer ${customerToken}`,
          },
        });

        if (!profileResponse.ok) {
          if (profileResponse.status === 401) {
            localStorage.removeItem("customerToken");
            localStorage.removeItem("customer");
            window.location.href = "/customer/login";
            return;
          }
          throw new Error("Failed to fetch profile");
        }

        const profileData = await profileResponse.json();
        const customerData = profileData.customer;

        // Update customer info in UI
        updateCustomerInfo(customerData);

        // Get license keys
        const licenseResponse = await fetch(`${cmsUrl}/api/license-keys`, {
          headers: {
            Authorization: `Bearer ${customerToken}`,
          },
        });

        if (!licenseResponse.ok) {
          throw new Error("Failed to fetch license keys");
        }

        const licenseData = await licenseResponse.json();
        displayLicenseKeys(licenseData.licenseKeys);
        updateStats(licenseData.licenseKeys);
        updateRecentActivity(customerData.purchases, licenseData.licenseKeys);
      } catch (error) {
        console.error("Error loading dashboard data:", error);
        const container = document.getElementById("license-keys-container");
        if (container) {
          container.innerHTML = `
          <div class="alert alert-error">
            <span>Error loading data: ${error.message}</span>
          </div>
        `;
        }
      }
    }

    function updateCustomerInfo(customerData) {
      const customerNameElement = document.getElementById("customer-name");
      const customerInitialsElement =
        document.getElementById("customer-initials");
      const customerFullNameElement =
        document.getElementById("customer-full-name");
      const customerEmailElement = document.getElementById("customer-email");
      const customerIdElement = document.getElementById("customer-id");

      if (customerNameElement) {
        customerNameElement.textContent =
          `${customerData.firstName || ""} ${customerData.lastName || ""}`.trim() ||
          "Customer";
      }

      if (customerInitialsElement) {
        const initials = `${customerData.firstName?.[0] || ""}${customerData.lastName?.[0] || ""}`;
        customerInitialsElement.textContent = initials || "CU";
      }

      if (customerFullNameElement) {
        customerFullNameElement.textContent =
          `${customerData.firstName || ""} ${customerData.lastName || ""}`.trim() ||
          "Customer";
      }

      if (customerEmailElement) {
        customerEmailElement.textContent = customerData.email || "No email";
      }

      if (customerIdElement) {
        customerIdElement.textContent = customerData.id || "No ID";
      }

      // Update localStorage with fresh data
      localStorage.setItem("customer", JSON.stringify(customerData));
    }

    function displayLicenseKeys(licenseKeys) {
      // Store license keys for global access
      currentLicenseKeys = licenseKeys;

      const container = document.getElementById("license-keys-container");
      if (!container) return;

      if (licenseKeys.length === 0) {
        container.innerHTML = `
        <div class="text-center py-8">
          <div class="text-6xl mb-4">🔐</div>
          <h3 class="text-lg font-semibold mb-2">No License Keys Yet</h3>
          <p class="text-gray-600">Your license keys will appear here after making a purchase.</p>
          <a href="/pricing" class="btn btn-primary mt-4">View Products</a>
        </div>
      `;
        return;
      }

      const licenseCardsHTML = licenseKeys
        .map(
          (license) => `
      <div class="card bg-base-100 border shadow-sm">
        <div class="card-body">
          <div class="flex justify-between items-start mb-4">
            <div>
              <h3 class="card-title text-lg">${license.productName}</h3>
              <p class="text-sm opacity-70">License Key</p>
            </div>
            <div class="badge ${license.isActive ? "badge-success" : "badge-error"}">
              ${license.isActive ? "Active" : "Inactive"}
            </div>
          </div>
          
          <div class="form-control">
            <label class="label">
              <span class="label-text">License Key</span>
            </label>
            <div class="input-group">
              <input type="text" value="${license.key}" class="input input-bordered flex-1" readonly />
              <button class="btn btn-primary" onclick="copyToClipboard('${license.key}')">Copy</button>
            </div>
          </div>
          
          <div class="grid grid-cols-2 gap-4 mt-4">
            <div>
              <span class="text-sm opacity-70">Status:</span>
              <span class="ml-2 badge ${
                license.status === "active"
                  ? "badge-success"
                  : license.isUsed
                    ? "badge-warning"
                    : "badge-info"
              }">
                ${
                  license.status === "active"
                    ? "Active"
                    : license.isUsed
                      ? "Used"
                      : "Available"
                }
              </span>
            </div>
            <div>
              <span class="text-sm opacity-70">Type:</span>
              <span class="ml-2">${license.productName}</span>
            </div>
          </div>
          
          ${
            license.isUsed || license.status === "active"
              ? `
            <div class="mt-4">
              <span class="text-sm opacity-70">Activated:</span>
              <span class="ml-2">${new Date(license.activatedAt).toLocaleDateString()}</span>
            </div>
          `
              : ""
          }
          
          <div class="card-actions justify-end mt-4">
            <button class="btn btn-ghost btn-sm" onclick="copyToClipboard('${license.key}')">
              📋 Copy Key
            </button>
            ${
              license.isUsed || license.status === "active"
                ? `
                <button class="btn btn-warning btn-sm" onclick="openDeactivationModal('${license.id}')">
                  🔌 Offline Deactivate
                </button>
                `
                : `
                <button class="btn btn-secondary btn-sm" onclick="openGenerateActivationModal('${license.id}')">
                  ⚡ Offline Activate
                </button>
                `
            }
          </div>
        </div>
      </div>
    `,
        )
        .join("");

      container.innerHTML = `
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
        ${licenseCardsHTML}
      </div>
    `;
    }

    function updateStats(licenseKeys) {
      const totalLicenses = licenseKeys.length;
      const activeLicenses = licenseKeys.filter(
        (license) => license.isUsed,
      ).length;
      const availableLicenses = licenseKeys.filter(
        (license) => !license.isUsed && license.isActive,
      ).length;

      const totalElement = document.getElementById("total-licenses");
      const activeElement = document.getElementById("active-licenses");
      const availableElement = document.getElementById("available-licenses");

      if (totalElement) totalElement.textContent = totalLicenses;
      if (activeElement) activeElement.textContent = activeLicenses;
      if (availableElement) availableElement.textContent = availableLicenses;
    }

    let currentLicenseId = null;
    let currentLicenseKeys = []; // Store current license keys

    // Helper function to get current license keys
    function getCurrentLicenseKeys() {
      return currentLicenseKeys;
    }

    (window as any).openGenerateActivationModal = function (licenseId) {
      // First check if license is already active
      const licenseKeys = getCurrentLicenseKeys();
      const license = licenseKeys.find(
        (l: any) => l.id.toString() === licenseId.toString(),
      ) as any;

      if (license && (license.isUsed || license.status === "active")) {
        alert(
          "This license is already active. Please deactivate it first before generating a new activation code.",
        );
        return;
      }

      currentLicenseId = licenseId;
      const modal = document.getElementById(
        "generate_activation_modal",
      ) as HTMLDialogElement;

      // Reset modal to the MAC address step
      const macStep = document.getElementById("mac-address-step");
      const codeStep = document.getElementById("activation-code-step");
      if (macStep) macStep.classList.remove("hidden");
      if (codeStep) codeStep.classList.add("hidden");

      // Reset inputs
      const macInput = document.getElementById(
        "macAddressInput",
      ) as HTMLInputElement;
      const activationCodeDisplay = document.getElementById(
        "activationCodeDisplay",
      ) as HTMLInputElement;
      const boundMacDisplay = document.getElementById(
        "boundMacDisplay",
      ) as HTMLInputElement;
      const securityMacDisplay = document.getElementById("securityMacDisplay");

      if (macInput) macInput.value = "";
      if (activationCodeDisplay) activationCodeDisplay.value = "";
      if (boundMacDisplay) boundMacDisplay.value = "";
      if (securityMacDisplay) securityMacDisplay.textContent = "";

      modal?.showModal();
    };

    // MAC Address Modal functions
    (window as any).showMacInstructions = function (os: string) {
      // Hide all instructions
      document
        .querySelectorAll(".mac-instruction")
        .forEach((el) => el.classList.add("hidden"));
      // Remove active class from all tabs
      document
        .querySelectorAll(".tab")
        .forEach((el) => el.classList.remove("tab-active"));

      // Show selected instructions
      const selectedInstructions = document.getElementById(
        `${os}-instructions`,
      );
      if (selectedInstructions) selectedInstructions.classList.remove("hidden");

      // Add active class to clicked tab
      const tabs = document.querySelectorAll(".tab");
      const osIndex = os === "windows" ? 0 : os === "macos" ? 1 : 2;
      if (tabs[osIndex]) tabs[osIndex].classList.add("tab-active");
    };

    (window as any).copyCommand = function (command: string) {
      navigator.clipboard
        .writeText(command)
        .then(() => {
          // Show brief success message
          const btn =
            (event?.target as HTMLButtonElement) ||
            (document.activeElement as HTMLButtonElement);
          if (btn && btn.tagName === "BUTTON") {
            const originalText = btn.textContent;
            btn.textContent = "Copied!";
            btn.classList.add("btn-success");
            btn.classList.remove("btn-outline");
            setTimeout(() => {
              btn.textContent = originalText;
              btn.classList.remove("btn-success");
              btn.classList.add("btn-outline");
            }, 2000);
          }
        })
        .catch(() => {
          alert("Failed to copy command to clipboard");
        });
    };

    (window as any).proceedToActivation = function () {
      const macInput = document.getElementById(
        "macAddressInput",
      ) as HTMLInputElement;
      const macAddress = macInput.value.trim();

      // Validate MAC address format
      const macPattern = /^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$/;
      if (!macPattern.test(macAddress)) {
        alert("Please enter a valid MAC address in format XX:XX:XX:XX:XX:XX");
        return;
      }

      // Hide step 1, show step 2
      const macStep = document.getElementById("mac-address-step");
      const codeStep = document.getElementById("activation-code-step");
      if (macStep) macStep.classList.add("hidden");
      if (codeStep) codeStep.classList.remove("hidden");

      // Store the MAC address and proceed with activation
      generateActivationCodeWithMac(macAddress);
    };

    (window as any).resetActivationModal = function () {
      // Reset to step 1
      const codeStep = document.getElementById("activation-code-step");
      const macStep = document.getElementById("mac-address-step");
      if (codeStep) codeStep.classList.add("hidden");
      if (macStep) macStep.classList.remove("hidden");

      // Clear inputs
      const macInput = document.getElementById(
        "macAddressInput",
      ) as HTMLInputElement;
      const activationCodeDisplay = document.getElementById(
        "activationCodeDisplay",
      ) as HTMLInputElement;
      const boundMacDisplay = document.getElementById(
        "boundMacDisplay",
      ) as HTMLInputElement;
      const securityMacDisplay = document.getElementById("securityMacDisplay");

      if (macInput) macInput.value = "";
      if (activationCodeDisplay) activationCodeDisplay.value = "";
      if (boundMacDisplay) boundMacDisplay.value = "";
      if (securityMacDisplay) securityMacDisplay.textContent = "";
    };

    async function generateActivationCodeWithMac(macAddress: string) {
      try {
        const cmsUrl =
          document.documentElement.getAttribute("data-cms-url") ||
          "http://localhost:1337";
        const response = await fetch(
          `${cmsUrl}/api/license-keys/${currentLicenseId}/generate-activation-code`,
          {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${customerToken}`,
            },
            body: JSON.stringify({ machineId: macAddress }),
          },
        );

        if (!response.ok) {
          const error = await response.json();
          throw new Error(
            error.error?.message || "Failed to generate activation code",
          );
        }

        const { activationCode } = await response.json();

        // Display the activation code and bound MAC
        const activationCodeDisplay = document.getElementById(
          "activationCodeDisplay",
        ) as HTMLInputElement;
        const boundMacDisplay = document.getElementById(
          "boundMacDisplay",
        ) as HTMLInputElement;
        const securityMacDisplay =
          document.getElementById("securityMacDisplay");

        if (activationCodeDisplay) activationCodeDisplay.value = activationCode;
        if (boundMacDisplay) boundMacDisplay.value = macAddress;
        if (securityMacDisplay) securityMacDisplay.textContent = macAddress;

        loadDashboardData(); // Refresh data to show license is now "Active"
      } catch (error) {
        alert(`Error: ${(error as Error).message}`);
        const resetFunc = (window as any).resetActivationModal;
        if (resetFunc) resetFunc();
      }
    }

    (window as any).confirmActivation = async function () {
      // This function is deprecated - keeping for compatibility
      alert("Please use the new MAC address-based activation system.");
    };

    (window as any).copyActivationCode = function () {
      const activationCodeDisplay = document.getElementById(
        "activationCodeDisplay",
      ) as HTMLInputElement;

      if (activationCodeDisplay && activationCodeDisplay.value) {
        navigator.clipboard.writeText(activationCodeDisplay.value).then(() => {
          // Show brief success message
          const btn = event?.target as HTMLButtonElement;
          if (btn) {
            const originalText = btn.textContent;
            btn.textContent = "Copied!";
            btn.classList.add("btn-success");
            setTimeout(() => {
              btn.textContent = originalText;
              btn.classList.remove("btn-success");
            }, 2000);
          }
        });
      } else {
        // Fallback for old textarea (legacy support)
        const textarea = document.getElementById(
          "activation_code_textarea",
        ) as HTMLTextAreaElement;
        if (textarea) {
          navigator.clipboard.writeText(textarea.value).then(() => {
            alert("Activation code copied to clipboard!");
          });
        }
      }
    };

    (window as any).copyFromDisplay = function (elementId) {
      const input = document.getElementById(elementId) as HTMLInputElement;
      navigator.clipboard.writeText(input.value).then(() => {
        alert("Copied to clipboard!");
      });
    };

    (window as any).openDeactivationModal = function (licenseId) {
      currentLicenseId = licenseId;
      const modal = document.getElementById(
        "deactivation_modal",
      ) as HTMLDialogElement;
      const textarea = document.getElementById(
        "deactivation_code_textarea",
      ) as HTMLTextAreaElement;
      textarea.value = "";
      modal?.showModal();
    };

    (window as any).submitDeactivation = async function () {
      const modal = document.getElementById(
        "deactivation_modal",
      ) as HTMLDialogElement;
      const textarea = document.getElementById(
        "deactivation_code_textarea",
      ) as HTMLTextAreaElement;
      const loading = document.getElementById("deactivation-loading");
      const deactivationCode = textarea.value;

      if (!deactivationCode) {
        alert("Please paste the deactivation code.");
        return;
      }

      if (loading) loading.classList.remove("hidden");

      try {
        const cmsUrl =
          document.documentElement.getAttribute("data-cms-url") ||
          "http://localhost:1337";
        const response = await fetch(
          `${cmsUrl}/api/license-keys/${currentLicenseId}/deactivate-with-code`,
          {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${customerToken}`,
            },
            body: JSON.stringify({ deactivationCode }),
          },
        );

        if (!response.ok) {
          const error = await response.json();
          throw new Error(
            error.error?.message || "Failed to deactivate license",
          );
        }

        alert("License deactivated successfully!");
        modal?.close();
        loadDashboardData(); // Refresh data
      } catch (error) {
        alert(`Error: ${(error as Error).message}`);
      } finally {
        if (loading) loading.classList.add("hidden");
      }
    };

    function updateRecentActivity(purchases, licenseKeys) {
      const container = document.getElementById("recent-activity");
      if (!container) return;

      // Combine purchases and license activations into a single activity feed
      const activities = [
        // Sample object to help TypeScript infer the type
        ...(purchases && purchases.length > 0
          ? purchases.map((purchase) => ({
              type: "purchase",
              date: new Date(purchase.createdAt),
              text: `Purchased ${purchase.metadata?.product || "product"}`,
              amount: `$${purchase.amount}`,
              icon: "💳",
            }))
          : []),
        ...(licenseKeys && licenseKeys.length > 0
          ? licenseKeys
              .filter((license) => license.isUsed && license.activatedAt)
              .map((license) => ({
                type: "activation",
                date: new Date(license.activatedAt),
                text: `Activated ${license.productName} license`,
                icon: "🔑",
              }))
          : []),
      ];

      // Sort activities by date (most recent first)
      activities.sort((a, b) => b.date.getTime() - a.date.getTime());

      // Take only the 5 most recent activities
      const recentActivities = activities.slice(0, 5);

      if (recentActivities.length === 0) {
        container.innerHTML = `
        <div class="text-center py-4">
          <div class="text-4xl mb-2">📋</div>
          <p class="text-sm opacity-70">No recent activity</p>
        </div>
      `;
        return;
      }

      let activitiesHTML = "";
      for (const activity of recentActivities) {
        const dateStr = new Date(activity.date).toLocaleDateString();
        const timeStr = new Date(activity.date).toLocaleTimeString([], {
          hour: "2-digit",
          minute: "2-digit",
        });
        const amountStr = activity.amount
          ? `<div class="text-sm font-semibold text-primary">${activity.amount}</div>`
          : "";

        activitiesHTML += `
        <div class="flex items-center space-x-3 py-2">
          <div class="text-lg">${activity.icon}</div>
          <div class="flex-1">
            <p class="text-sm font-medium">${activity.text}</p>
            <p class="text-xs opacity-70">${dateStr} ${timeStr}</p>
          </div>
          ${amountStr}
        </div>
      `;
      }

      container.innerHTML = activitiesHTML;
    }

    // Global functions for license management
    (window as any).copyToClipboard = function (text) {
      navigator.clipboard.writeText(text).then(() => {
        alert("License key copied to clipboard!");
      });
    };

    (window as any).activateLicense = async function (licenseId) {
      try {
        const cmsUrl =
          document.documentElement.getAttribute("data-cms-url") ||
          "http://localhost:1337";
        const response = await fetch(
          `${cmsUrl}/api/license-keys/${licenseId}/activate`,
          {
            method: "POST",
            headers: {
              Authorization: `Bearer ${customerToken}`,
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              deviceInfo: {
                userAgent: navigator.userAgent,
                platform: navigator.platform,
                timestamp: new Date().toISOString(),
              },
            }),
          },
        );

        if (!response.ok) {
          const error = await response.json();
          throw new Error(error.error || "Failed to activate license");
        }

        alert("License activated successfully!");
        loadDashboardData(); // Reload data
      } catch (error) {
        alert(`Error activating license: ${(error as Error).message}`);
      }
    };

    (window as any).deactivateLicense = async function (licenseId: string) {
      if (!confirm("Are you sure you want to deactivate this license?")) {
        return;
      }

      try {
        const cmsUrl =
          document.documentElement.getAttribute("data-cms-url") ||
          "http://localhost:1337";
        const response = await fetch(
          `${cmsUrl}/api/license-keys/${licenseId}/deactivate`,
          {
            method: "POST",
            headers: {
              Authorization: `Bearer ${customerToken}`,
            },
          },
        );

        if (!response.ok) {
          const error = await response.json();
          throw new Error(error.error || "Failed to deactivate license");
        }

        alert("License deactivated successfully!");
        loadDashboardData(); // Reload data
      } catch (error) {
        alert(`Error deactivating license: ${(error as Error).message}`);
      }
    };

    // Load dashboard data on page load
    loadDashboardData();
  } // End of login check
</script>
